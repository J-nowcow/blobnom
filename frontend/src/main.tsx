/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import {useEffect} from 'react';
import ReactDOM from 'react-dom/client';
import {RouterProvider} from '@tanstack/react-router';

// Import the generated route tree
import '@mantine/core/styles.css';
import '@mantine/dates/styles.css';
import "./main.css";
import {ColorSchemeScript, MantineProvider} from "@mantine/core";
import {QueryClient, QueryClientProvider} from "@tanstack/react-query";
import dayjs from 'dayjs';
import duration from 'dayjs/plugin/duration';
import relativeTime from 'dayjs/plugin/relativeTime';
import "dayjs/locale/ko";
import isBetween from 'dayjs/plugin/isBetween';
import utc from 'dayjs/plugin/utc';
import {ModalsProvider} from "@mantine/modals";
import Theme from "./constants/Theme.tsx";
import '@mantine/notifications/styles.css';
import {AuthProvider} from "./context/AuthProvider.tsx";
import {useSearchStore} from './store/searchStore'; // Zustand 스토어 임포트
// Create a new router instance
// `createRouter` is already used in `router.tsx`, so we can import router from there
import router from './router';
import {SocketProvider} from "./context/SocketProvider.tsx";
import {Notifications} from "@mantine/notifications";
import {isAxiosError} from "axios";

// source : https://github.com/TanStack/query/discussions/372
const MAX_RETRIES = 3
const HTTP_STATUS_TO_NOT_RETRY = [400, 401, 403, 404];
const queryClient = new QueryClient({
    defaultOptions: {
        queries: {
            retry: (failureCount, error) => {
                if (failureCount > MAX_RETRIES) {
                    return false;
                }

                if (isAxiosError(error) &&
                    HTTP_STATUS_TO_NOT_RETRY.includes(error.response?.status ?? 0)) {
                    console.log(`Aborting retry due to ${error.response?.status} status`);
                    return false;
                }

                return true;
            },
        },
    },
});

dayjs.extend(duration);
dayjs.extend(relativeTime);
dayjs.extend(isBetween);
dayjs.locale("ko");
dayjs.extend(utc);

const AppWrapper: React.FC = () => {
    const {search, page, activeOnly, setSearch, setPage, setActiveOnly} = useSearchStore();

    // Zustand 상태가 변경될 때마다 브라우저 히스토리에 상태 저장
    useEffect(() => {
        const state = {search, page, activeOnly};
        window.history.pushState(state, '', window.location.pathname);
    }, [search, page, activeOnly]);

    // 브라우저의 popstate 이벤트를 통해 상태 복원
    useEffect(() => {
        const handlePopState = (event: PopStateEvent) => {
            if (event.state) {
                const {search, page, activeOnly} = event.state;
                setSearch(search || '');
                setPage(page || 1);
                setActiveOnly(activeOnly || false);
            }
        };

        window.addEventListener('popstate', handlePopState);

        // 초기 로드 시 히스토리에 상태가 있다면 Zustand에 설정
        if (window.history.state) {
            const {search, page, activeOnly} = window.history.state;
            setSearch(search || '');
            setPage(page || 1);
            setActiveOnly(activeOnly || false);
        }

        return () => {
            window.removeEventListener('popstate', handlePopState);
        };
    }, [setSearch, setPage, setActiveOnly]);

    return (
        <QueryClientProvider client={queryClient}>
            <AuthProvider>
                <SocketProvider>
                    <ColorSchemeScript forceColorScheme="dark"/>
                    <MantineProvider forceColorScheme="dark" theme={Theme}>
                        <ModalsProvider>
                            <Notifications limit={10} position="top-right"/>
                            <RouterProvider router={router}/>
                        </ModalsProvider>
                    </MantineProvider>
                </SocketProvider>
            </AuthProvider>
        </QueryClientProvider>
    );
};

// 애플리케이션 렌더링
const rootElement = document.getElementById('root')!;
if (!rootElement.innerHTML) {
    const root = ReactDOM.createRoot(rootElement);
    root.render(
        <AppWrapper/>
    );
}
